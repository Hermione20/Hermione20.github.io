<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>写在前面</title>
    <link href="/2024/10/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <url>/2024/10/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>1.不定时更新</p><p>2.博文均为学习+实践过程记录，抑或是发癫级别分享</p><p>3.感谢赞助，欢迎留言！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第十二课 人脸检测</title>
    <link href="/2024/10/14/%E7%AC%AC12%E8%AF%BE%20%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/"/>
    <url>/2024/10/14/%E7%AC%AC12%E8%AF%BE%20%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>涉及模块objdetect:Object Detection</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cv</span>::CascadeClassifier<br></code></pre></td></tr></table></figure><p>用于对象检测的级联分类器类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">load</span> <span class="hljs-params">(<span class="hljs-type">const</span> String &amp;filename)</span></span><br></code></pre></td></tr></table></figure><p>从文件加载分类器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br></code></pre></td></tr></table></figure><p>检查分类器是否已加载。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">detectMultiScale</span><span class="hljs-params">(InputArray image, std::vector&lt;Rect&gt; &amp;objects, <span class="hljs-type">double</span> scaleFactor=<span class="hljs-number">1.1</span>, <span class="hljs-type">int</span> minNeighbors=<span class="hljs-number">3</span>, <span class="hljs-type">int</span> flags=<span class="hljs-number">0</span>, Size minSize=Size(), Size maxSize=Size())</span></span><br></code></pre></td></tr></table></figure><p>检测输入图像中不同大小的对象。检测到的对象作为矩形列表返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/objdetect.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string path = <span class="hljs-string">&quot;face.pgm&quot;</span>;<br>Mat img = <span class="hljs-built_in">imread</span>(path);<br><br>CascadeClassifier faceCascade;<br>    CascadeClassifier eyeCascade;<br>faceCascade.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;haarcascade_frontalface_default.xml&quot;</span>);<br>    eyeCascade.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;haarcascade_eye.xml&quot;</span>);<br><br><span class="hljs-keyword">if</span> (faceCascade.<span class="hljs-built_in">empty</span>()) &#123; cout &lt;&lt; <span class="hljs-string">&quot;XML file not loaded&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-keyword">if</span> (eyeCascade.<span class="hljs-built_in">empty</span>()) &#123; cout &lt;&lt; <span class="hljs-string">&quot;XML file not loaded&quot;</span> &lt;&lt; endl; &#125;<br>vector&lt;Rect&gt; faces;<br>    vector&lt;Rect&gt; eyes;<br>faceCascade.<span class="hljs-built_in">detectMultiScale</span>(img, faces, <span class="hljs-number">1.1</span>, <span class="hljs-number">10</span>);<br>    eyeCascade.<span class="hljs-built_in">detectMultiScale</span>(img, eyes, <span class="hljs-number">1.1</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; faces.<span class="hljs-built_in">size</span>(); i++) <br>&#123;<br><span class="hljs-built_in">rectangle</span>(img, faces[i].<span class="hljs-built_in">tl</span>(), faces[i].<span class="hljs-built_in">br</span>(), <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">3</span>);<br>&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; eyes.<span class="hljs-built_in">size</span>(); i++) <br>&#123;<br><span class="hljs-built_in">rectangle</span>(img, eyes[i].<span class="hljs-built_in">tl</span>(), eyes[i].<span class="hljs-built_in">br</span>(), <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br><span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第十一课 轮廓检测</title>
    <link href="/2024/10/14/%E7%AC%AC11%E8%AF%BE%20%E8%BD%AE%E5%BB%93%E6%A3%80%E6%B5%8B/"/>
    <url>/2024/10/14/%E7%AC%AC11%E8%AF%BE%20%E8%BD%AE%E5%BB%93%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::findContours</span><span class="hljs-params">(InputOutputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, <span class="hljs-type">int</span> mode, <span class="hljs-type">int</span> method, Point offset = Point())</span></span><br></code></pre></td></tr></table></figure><p>在二值图像中查找轮廓。从OpenCV3.2开始源图像不会这个函数被修改。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>image</td><td>二值输入图像</td></tr><tr><td>contours</td><td>检测到的轮廓，每个轮廓都存储为点向量（例如 std::vector&lt;std::vector<a href="cv::Point">cv::Point</a> &gt;）</td></tr><tr><td>hierarchy</td><td>可选的输出向量（例如 std::vector<a href="cv::Vec4i">cv::Vec4i</a>），包含有关图像拓扑的信息</td></tr><tr><td>mode</td><td>轮廓检索模式</td></tr><tr><td>method</td><td>轮廓近似方式</td></tr><tr><td>offset</td><td>每个轮廓点移动的可选偏移量</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cv::contourArea</span><span class="hljs-params">(InputArray contour, <span class="hljs-type">bool</span> oriented=<span class="hljs-literal">false</span>)</span></span><br></code></pre></td></tr></table></figure><p>计算轮廓区域</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cv::arcLength</span><span class="hljs-params">(InputArray curve, <span class="hljs-type">bool</span> closed)</span></span><br></code></pre></td></tr></table></figure><p>计算曲线长度或闭合轮廓周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::approxPolyDP</span><span class="hljs-params">(InputArray curve, OutputArray approxCurve, <span class="hljs-type">double</span> epsilon, <span class="hljs-type">bool</span> closed)</span></span><br></code></pre></td></tr></table></figure><p>函数cv::approxPolyDP用另一个具有较少顶点的曲线&#x2F;多边形来逼近一条曲线或多边形，以使它们之间的距离小于或等于指定的精度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Rect <span class="hljs-title">cv::boundingRect</span><span class="hljs-params">(InputArray array)</span></span><br></code></pre></td></tr></table></figure><p>计算并返回指定点集或灰度图像非零像素的最小上边界矩形。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::drawContours</span><span class="hljs-params">(InputOutputArray image, InputArrayOfArrays contours, <span class="hljs-type">int</span> contourIdx, <span class="hljs-type">const</span> Scalar &amp;color, <span class="hljs-type">int</span> thickness = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType = LINE_8, InputArray hierarchy = noArray(), <span class="hljs-type">int</span> maxLevel = INT_MAX, Point offset = Point())</span></span><br></code></pre></td></tr></table></figure><p>绘制轮廓轮廓或填充轮廓。如果厚度≥0，该函数在图像中绘制轮廓轮廓，如果厚度&lt;0，则填充轮廓所包围的区域。</p><p>Point_&lt; _Tp &gt; tl() const<br>     左上角</p><p>Point_&lt; _Tp &gt; br() const<br>     右下角</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//rect</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">cv</span>::Rect_&lt; _Tp &gt;<br><span class="hljs-keyword">typedef</span> Rect_&lt;<span class="hljs-type">int</span>&gt; cv::Rect2i<br><span class="hljs-keyword">typedef</span> Rect2i cv::Rect<br><span class="hljs-comment">//point</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">cv</span>::Point_&lt; _Tp &gt;<br><span class="hljs-keyword">typedef</span> Point_&lt;<span class="hljs-type">int</span>&gt; cv::Point2i<br><span class="hljs-keyword">typedef</span> Point2i cv::Point<br></code></pre></td></tr></table></figure><table><thead><tr><th>cv::Rect_&lt; _Tp &gt;类属性</th><th>含义</th></tr></thead><tbody><tr><td>height</td><td>矩形高度</td></tr><tr><td>width</td><td>矩形宽度</td></tr><tr><td>x</td><td>左上角的 x 坐标</td></tr><tr><td>y</td><td>左上角的 y 坐标</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getContours</span><span class="hljs-params">(Mat imgDil, Mat img)</span> </span>&#123;<br><br>vector&lt;vector&lt;Point&gt;&gt; contours; <span class="hljs-comment">//轮廓点集</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    vector&lt;Point&gt;: 这是一个动态数组，用于存储轮廓线上的点。</span><br><span class="hljs-comment">    每个点都是一个 Point 对象，通常包含图像中某个轮廓线上的像素点的坐标。</span><br><span class="hljs-comment">    vector&lt;vector&lt;Point&gt;&gt;: 这是一个二维向量，其中每个元素都是一个 vector&lt;Point&gt;。</span><br><span class="hljs-comment">    这种结构允许你存储多个轮廓，每个轮廓由一系列点组成。</span><br><span class="hljs-comment">    */</span><br>vector&lt;Vec4i&gt; hierarchy;<span class="hljs-comment">//轮廓层次结构</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Vec4i 是 OpenCV 中的一个模板类，用于存储四个整数值。</span><br><span class="hljs-comment">    在轮廓处理中，每个 Vec4i 通常表示一个轮廓的四个点的索引，</span><br><span class="hljs-comment">    这些索引指向一个更大的数组（通常是 vector&lt;Point&gt;），</span><br><span class="hljs-comment">    该数组包含了实际的点坐标。</span><br><span class="hljs-comment">    vector&lt;Vec4i&gt; 用来存储多个这样的 Vec4i 对象。</span><br><span class="hljs-comment">    在轮廓检测中，一个图像可能包含多个轮廓，每个轮廓由多个点组成。</span><br><span class="hljs-comment">    每个轮廓的点索引存储在一个 Vec4i 中，</span><br><span class="hljs-comment">    而所有的轮廓则存储在 vector&lt;Vec4i&gt; 中。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    层次结构 (hierarchy)</span><br><span class="hljs-comment">    hierarchy 数组包含了轮廓之间的层次关系。</span><br><span class="hljs-comment">    每个元素 Vec4i 包含四个值，分别表示：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Next：当前轮廓的下一个轮廓的索引（在 contours 中）。</span><br><span class="hljs-comment">    Previous：当前轮廓的前一个轮廓的索引。</span><br><span class="hljs-comment">    First Child：当前轮廓的第一个子轮廓的索引。</span><br><span class="hljs-comment">    Parent：当前轮廓的父轮廓的索引。</span><br><span class="hljs-comment">    这些信息可以用来理解轮廓之间的父子关系，</span><br><span class="hljs-comment">    例如，哪些轮廓是另一个轮廓的子轮廓，或者哪些轮廓是兄弟轮廓。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    这种层次结构信息在处理复杂的图像结构时非常有用，</span><br><span class="hljs-comment">    比如在图像分割、对象识别和图像分析中。</span><br><span class="hljs-comment">    */</span><br><br><span class="hljs-built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE); <span class="hljs-comment">//通过预处理的二值图像找到所有轮廓contours</span><br><span class="hljs-comment">//drawContours(img, contours, -1, Scalar(255, 0, 255), 2); //绘制所有轮廓</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; contours.<span class="hljs-built_in">size</span>(); i++) <br>&#123;<br><span class="hljs-type">double</span> area = <span class="hljs-built_in">contourArea</span>(contours[i]); <span class="hljs-comment">//计算每个轮廓区域</span><br>cout &lt;&lt; area &lt;&lt; endl;<br><br>vector&lt;vector&lt;Point&gt;&gt; <span class="hljs-built_in">conPoly</span>(contours.<span class="hljs-built_in">size</span>());<span class="hljs-comment">//大小与已检测到的轮廓数量相同。每个元素都是一个 vector&lt;Point&gt;，用于存储每个轮廓的多边形近似。</span><br><span class="hljs-function">vector&lt;Rect&gt; <span class="hljs-title">boundRect</span><span class="hljs-params">(contours.size())</span></span>;<span class="hljs-comment">//大小也与轮廓数量相同。每个元素是一个 Rect 对象，用于存储每个轮廓的边界矩形。</span><br>string objectType;<br><br><span class="hljs-keyword">if</span> (area &gt; <span class="hljs-number">1000</span>) <span class="hljs-comment">//过滤噪声</span><br>&#123;<br><span class="hljs-comment">//找轮廓的近似多边形或曲线</span><br><span class="hljs-type">double</span> peri = <span class="hljs-built_in">arcLength</span>(contours[i], <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">approxPolyDP</span>(contours[i], conPoly[i], <span class="hljs-number">0.02</span> * peri, <span class="hljs-literal">true</span>);<br><br>cout &lt;&lt; conPoly[i].<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>boundRect[i] = <span class="hljs-built_in">boundingRect</span>(conPoly[i]); <span class="hljs-comment">//找每个近似曲线的最小上边界矩形</span><br><br><span class="hljs-type">int</span> objCor = (<span class="hljs-type">int</span>)conPoly[i].<span class="hljs-built_in">size</span>();<span class="hljs-comment">//获取当前轮廓的顶点数。conPoly[i] 是第 i 个轮廓的多边形近似，size() 方法返回顶点的数量。</span><br><br><span class="hljs-keyword">if</span> (objCor == <span class="hljs-number">3</span>) &#123; objectType = <span class="hljs-string">&quot;Tri&quot;</span>; &#125;<span class="hljs-comment">//如果顶点数为3，那么对象被认为是一个三角形（Tri）。</span><br><span class="hljs-keyword">if</span> (objCor == <span class="hljs-number">4</span>) &#123; <span class="hljs-comment">//如果顶点数为4，进一步检查对象的宽高比来确定它是正方形还是矩形。</span><br><br><span class="hljs-type">float</span> aspRatio = (<span class="hljs-type">float</span>)boundRect[i].width / boundRect[i].height; <span class="hljs-comment">//宽高比</span><br>cout &lt;&lt; aspRatio &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (aspRatio &gt; <span class="hljs-number">0.95</span> &amp;&amp; aspRatio &lt; <span class="hljs-number">1.05</span>) &#123;<br>objectType = <span class="hljs-string">&quot;Square&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>objectType = <span class="hljs-string">&quot;Rect&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (objCor &gt; <span class="hljs-number">4</span>) &#123; objectType = <span class="hljs-string">&quot;CirCle&quot;</span>; &#125;<br><br><span class="hljs-built_in">drawContours</span>(img, conPoly, i, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>); <span class="hljs-comment">//绘制滤除噪声后的所有轮廓</span><br><span class="hljs-built_in">rectangle</span>(img, boundRect[i].<span class="hljs-built_in">tl</span>(), boundRect[i].<span class="hljs-built_in">br</span>(), <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">5</span>); <span class="hljs-comment">//绘制边界框</span><br><span class="hljs-built_in">putText</span>(img, objectType, &#123; boundRect[i].x, boundRect[i].y - <span class="hljs-number">5</span> &#125;, FONT_HERSHEY_PLAIN, <span class="hljs-number">1</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">69</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>);<br>&#125;<br>&#125; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>Mat img = <span class="hljs-built_in">imread</span>(path);<br>Mat imgGray, imgBlur, imgCanny, imgDil;<br><br><span class="hljs-comment">// Preprocessing</span><br><span class="hljs-built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);<br><span class="hljs-built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">3</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">Canny</span>(imgBlur, imgCanny, <span class="hljs-number">75</span>, <span class="hljs-number">125</span>);<br>Mat kernel = <span class="hljs-built_in">getStructuringElement</span>(MORPH_RECT, <span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>));<br><span class="hljs-built_in">dilate</span>(imgCanny, imgDil, kernel);<br><br><span class="hljs-built_in">getContours</span>(imgDil, img);<br><br>    <span class="hljs-built_in">namedWindow</span>(<span class="hljs-string">&quot;Image&quot;</span>,WINDOW_NORMAL);<br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br><span class="hljs-comment">/*imshow(&quot;Image Gray&quot;, imgGray);</span><br><span class="hljs-comment">imshow(&quot;Image Blur&quot;, imgBlur);</span><br><span class="hljs-comment">imshow(&quot;Image Canny&quot;, imgCanny);*/</span><br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image Dil&quot;</span>, imgDil);<br><br><span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E8%BD%AE%E5%BB%93%E6%A3%80%E6%B5%8B.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第十课 颜色检测</title>
    <link href="/2024/10/14/%E7%AC%AC10%E8%AF%BE%20%E9%A2%9C%E8%89%B2%E6%A3%80%E6%B5%8B/"/>
    <url>/2024/10/14/%E7%AC%AC10%E8%AF%BE%20%E9%A2%9C%E8%89%B2%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::inRange</span> <span class="hljs-params">(InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)</span></span><br></code></pre></td></tr></table></figure><p>检查数组元素是否位于其他两个数组的元素之间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::namedWindow</span> <span class="hljs-params">(<span class="hljs-type">const</span> String &amp;winname, <span class="hljs-type">int</span> flags = WINDOW_AUTOSIZE)</span></span><br></code></pre></td></tr></table></figure><p>创建一个窗口。函数namedWindow创建一个可用作图像和轨迹栏占位符的窗口。创建的窗口由它们的名称引用。如果同名的窗口已经存在，则该函数不执行任何操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cv::createTrackbar</span> <span class="hljs-params">(<span class="hljs-type">const</span> String &amp;trackbarname, <span class="hljs-type">const</span> String &amp;winname, <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> count, TrackbarCallback onChange = <span class="hljs-number">0</span>, <span class="hljs-type">void</span> *userdata = <span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>创建一个trackbar并将其附加到指定窗口。函数createTrackbar创建一个具有指定名称和范围的trackbar（滑块或范围控件），分配一个变量值作为与trackbar同步的位置，并指定回调函数onChange为 在跟踪栏位置变化时被调用。创建的轨迹栏显示在指定的窗口winname中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>Mat imgHSV, mask;<br><span class="hljs-type">int</span> hmin = <span class="hljs-number">0</span>, smin = <span class="hljs-number">110</span>, vmin = <span class="hljs-number">153</span>;<br><span class="hljs-type">int</span> hmax = <span class="hljs-number">19</span>, smax = <span class="hljs-number">240</span>, vmax = <span class="hljs-number">255</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    <span class="hljs-built_in">cvtColor</span>(img, imgHSV, COLOR_BGR2HSV);<br>    <span class="hljs-built_in">namedWindow</span>(<span class="hljs-string">&quot;Trackbars&quot;</span>, (<span class="hljs-number">640</span>, <span class="hljs-number">200</span>));<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Hue Min&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;hmin, <span class="hljs-number">179</span>);<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Hue Max&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;hmax, <span class="hljs-number">179</span>);<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Sat Min&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;smin, <span class="hljs-number">255</span>);<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Sat Max&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;smax, <span class="hljs-number">255</span>);<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Val Min&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;vmin, <span class="hljs-number">255</span>);<br>    <span class="hljs-built_in">createTrackbar</span>(<span class="hljs-string">&quot;Val Max&quot;</span>, <span class="hljs-string">&quot;Trackbars&quot;</span>, &amp;vmax, <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-function">Scalar <span class="hljs-title">lower</span><span class="hljs-params">(hmin, smin, vmin)</span></span>;<br>        <span class="hljs-function">Scalar <span class="hljs-title">upper</span><span class="hljs-params">(hmax, smax, vmax)</span></span>;<br>        <span class="hljs-built_in">inRange</span>(imgHSV, lower, upper, mask);<br>        <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>        <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image HSV&quot;</span>, imgHSV);<br>        <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image Mask&quot;</span>, mask);<br>        <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E9%A2%9C%E8%89%B2%E6%A3%80%E6%B5%8B.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第九课 透视变换</title>
    <link href="/2024/10/14/%E7%AC%AC9%E8%AF%BE%20%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/"/>
    <url>/2024/10/14/%E7%AC%AC9%E8%AF%BE%20%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Mat <span class="hljs-title">cv::getPerspectiveTransform</span> <span class="hljs-params">(<span class="hljs-type">const</span> Point2f src[], <span class="hljs-type">const</span> Point2f dst[])</span></span><br></code></pre></td></tr></table></figure><p>返回相应 4 个点对的 3x3 透视变换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::warpPerspective</span> <span class="hljs-params">(InputArray src, OutputArray dst, InputArray M, Size dsize, <span class="hljs-type">int</span> flags=INTER_LINEAR, <span class="hljs-type">int</span> borderMode=BORDER_CONSTANT, <span class="hljs-type">const</span> Scalar &amp;borderValue=Scalar())</span></span><br></code></pre></td></tr></table></figure><p>对图像应用透视变换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">float</span> w = <span class="hljs-number">250</span>, h = <span class="hljs-number">350</span>;<br>Mat matrix, imgWarp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;card.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    std::cout &lt;&lt; img.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>    Point2f src[<span class="hljs-number">4</span>] = &#123; &#123;<span class="hljs-number">245</span>, <span class="hljs-number">1098</span>&#125;, &#123;<span class="hljs-number">1611</span>, <span class="hljs-number">513</span>&#125;,  &#123;<span class="hljs-number">1836</span>, <span class="hljs-number">3490</span>&#125;,&#123;<span class="hljs-number">3002</span>, <span class="hljs-number">2491</span>&#125;&#125;;<br>    Point2f dst[<span class="hljs-number">4</span>] = &#123; &#123;<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>&#125;, &#123;w, <span class="hljs-number">0.0f</span>&#125;, &#123;<span class="hljs-number">0.0f</span>, h&#125;, &#123;w, h&#125; &#125;;<br>    matrix = <span class="hljs-built_in">getPerspectiveTransform</span>(src, dst);<br>    <span class="hljs-built_in">warpPerspective</span>(img, imgWarp, matrix, <span class="hljs-built_in">Point</span>(w, h));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-built_in">circle</span>(img, src[i], <span class="hljs-number">10</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), FILLED);<br>    &#125;<br><br>    <span class="hljs-built_in">namedWindow</span>(<span class="hljs-string">&quot;Image&quot;</span>,WINDOW_NORMAL);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageWarp&quot;</span>, imgWarp);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E5%8D%A1%E7%89%87%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第八课 形状字体</title>
    <link href="/2024/10/14/%E7%AC%AC8%E8%AF%BE%20%E5%BD%A2%E7%8A%B6%E5%AD%97%E4%BD%93/"/>
    <url>/2024/10/14/%E7%AC%AC8%E8%AF%BE%20%E5%BD%A2%E7%8A%B6%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Mat</span>(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">int</span> type, <span class="hljs-type">const</span> Scalar &amp;s)<br></code></pre></td></tr></table></figure><p>重载的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::circle</span><span class="hljs-params">(InputOutputArray img, Point center, <span class="hljs-type">int</span> radius, <span class="hljs-type">const</span> Scalar &amp;color, <span class="hljs-type">int</span> thickness=<span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType=LINE_8, <span class="hljs-type">int</span> shift=<span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>函数 cv::circle 用给定的中心和半径绘制一个简单的或实心圆。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::rectangle</span><span class="hljs-params">(InputOutputArray img, Point pt1, Point pt2, <span class="hljs-type">const</span> Scalar &amp;color, <span class="hljs-type">int</span> thickness=<span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType=LINE_8, <span class="hljs-type">int</span> shift=<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::rectangle</span><span class="hljs-params">(Mat &amp;img, Rect rec, <span class="hljs-type">const</span> Scalar &amp;color, <span class="hljs-type">int</span> thickness=<span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType=LINE_8, <span class="hljs-type">int</span> shift=<span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>绘制一个简单的、粗的或填充的右上矩形。函数 cv::rectangle 绘制一个矩形轮廓或两个对角为 pt1 和 pt2 的填充矩形。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::line</span> <span class="hljs-params">(InputOutputArray img, Point pt1, Point pt2, <span class="hljs-type">const</span> Scalar &amp;color, <span class="hljs-type">int</span> thickness=<span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType=LINE_8, <span class="hljs-type">int</span> shift=<span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>绘制连接两点的线段。函数line绘制图像中 pt1 和 pt2 点之间的线段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::putText</span> <span class="hljs-params">(InputOutputArray img, <span class="hljs-type">const</span> String &amp;text, Point org, <span class="hljs-type">int</span> fontFace, <span class="hljs-type">double</span> fontScale, Scalar color, <span class="hljs-type">int</span> thickness=<span class="hljs-number">1</span>, <span class="hljs-type">int</span> lineType=LINE_8, <span class="hljs-type">bool</span> bottomLeftOrigin=<span class="hljs-literal">false</span>)</span></span><br></code></pre></td></tr></table></figure><p>绘制一个文本字符串。函数 cv::putText 在图像中呈现指定的文本字符串。无法使用指定字体呈现的符号将替换为问号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//Blank Image</span><br>    <span class="hljs-function">Mat <span class="hljs-title">img</span><span class="hljs-params">(<span class="hljs-number">512</span>, <span class="hljs-number">512</span>, CV_8UC3, Scalar(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))</span></span>;<br>    <span class="hljs-built_in">circle</span>(img, <span class="hljs-built_in">Point</span>(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>), <span class="hljs-number">155</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">69</span>, <span class="hljs-number">255</span>), FILLED);<br>    <span class="hljs-built_in">rectangle</span>(img, <span class="hljs-built_in">Point</span>(<span class="hljs-number">130</span>, <span class="hljs-number">226</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">382</span>, <span class="hljs-number">286</span>), <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), <span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">line</span>(img, <span class="hljs-built_in">Point</span>(<span class="hljs-number">130</span>, <span class="hljs-number">296</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">382</span>, <span class="hljs-number">296</span>), <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">putText</span>(img, <span class="hljs-string">&quot;TCY&#x27;s Workshop&quot;</span>, <span class="hljs-built_in">Point</span>(<span class="hljs-number">137</span>, <span class="hljs-number">262</span>), FONT_HERSHEY_DUPLEX, <span class="hljs-number">0.95</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">69</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E5%9B%BE%E6%A0%87.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第七课 调整裁剪</title>
    <link href="/2024/10/14/%E7%AC%AC7%E8%AF%BE%20%E8%B0%83%E6%95%B4%E8%A3%81%E5%89%AA/"/>
    <url>/2024/10/14/%E7%AC%AC7%E8%AF%BE%20%E8%B0%83%E6%95%B4%E8%A3%81%E5%89%AA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::resize</span><span class="hljs-params">(InputArray src, OutputArray dst, Size dsize, <span class="hljs-type">double</span> fx=<span class="hljs-number">0</span>, <span class="hljs-type">double</span> fy=<span class="hljs-number">0</span>, <span class="hljs-type">int</span> interpolation = INTER_LINEAR)</span></span><br></code></pre></td></tr></table></figure><p>调整图像的大小。函数 resize 将图像 src 的大小缩小到或最大到指定的大小。请注意，不考虑初始 dst 类型或大小。相反，大小和类型是从 src、dsize、fx 和 fy 派生的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    cv::Mat img = <span class="hljs-built_in">imread</span>(path);<br>    cv::Mat imgResize, imgCrop;<br>    std::cout &lt;&lt; img.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>    <span class="hljs-built_in">resize</span>(img, imgResize, <span class="hljs-built_in">Size</span>(), <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);<br>    <span class="hljs-function">Rect <span class="hljs-title">my_roi</span><span class="hljs-params">(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>)</span></span>;<br>    imgCrop = <span class="hljs-built_in">img</span>(my_roi);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageResize&quot;</span>, imgResize);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageCrop&quot;</span>, imgCrop);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E8%B0%83%E6%95%B4%E8%A3%81%E5%89%AA.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第六课 腐蚀膨胀</title>
    <link href="/2024/10/14/%E7%AC%AC6%E8%AF%BE%20%20%E8%85%90%E8%9A%80%E8%86%A8%E8%83%80/"/>
    <url>/2024/10/14/%E7%AC%AC6%E8%AF%BE%20%20%E8%85%90%E8%9A%80%E8%86%A8%E8%83%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Mat <span class="hljs-title">cv::getStructuringElement</span><span class="hljs-params">(<span class="hljs-type">int</span> shape, Size ksize, Point anchor = Point(<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>))</span></span><br></code></pre></td></tr></table></figure><p>返回指定大小和形状的结构元素，用于形态学操作。该函数构造并返回可以进一步传递给腐蚀、扩张或形态学的结构元素。 但是您也可以自己构建任意二进制掩码并将其用作结构元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::dilate</span><span class="hljs-params">(InputArray src, OutputArray dst, InuputArray kernel, Point anchor = Point(<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>), <span class="hljs-type">int</span> iterations = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> borderType = BORDER_CONSTANT, <span class="hljs-type">const</span> Scalar &amp;borderValue = morphologyDefaultBorderValue())</span></span><br></code></pre></td></tr></table></figure><p>使用特定的结构元素膨胀图像。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::erode</span><span class="hljs-params">(InputArray src, OutputArray dst, InuputArray kernel, Point anchor = Point(<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>), <span class="hljs-type">int</span> iterations = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> borderType = BORDER_CONSTANT, <span class="hljs-type">const</span> Scalar &amp;borderValue = morphologyDefaultBorderValue())</span></span><br></code></pre></td></tr></table></figure><p>使用特定的结构元素腐蚀图像。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    Mat imgBlur,imgCanny,imgDilate,imgErode;<br>    <span class="hljs-built_in">GaussianBlur</span>(img, imgBlur, <span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">3</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//高斯模糊</span><br>    <span class="hljs-built_in">Canny</span>(imgBlur, imgCanny, <span class="hljs-number">75</span>, <span class="hljs-number">125</span>); <span class="hljs-comment">//边缘检测</span><br>    Mat kernel = <span class="hljs-built_in">getStructuringElement</span>(MORPH_RECT,<span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//得到形态学结构的核</span><br>    <span class="hljs-built_in">dilate</span>(imgCanny,imgDilate,kernel);<br>    <span class="hljs-built_in">erode</span>(imgDilate,imgErode,kernel);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageDilation&quot;</span>, imgDilate);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageErode&quot;</span>, imgErode);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E8%85%90%E8%9A%80%E8%86%A8%E8%83%80.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第五课 Canny边缘</title>
    <link href="/2024/10/14/%E7%AC%AC5%E8%AF%BE%20Canny%E8%BE%B9%E7%BC%98/"/>
    <url>/2024/10/14/%E7%AC%AC5%E8%AF%BE%20Canny%E8%BE%B9%E7%BC%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::Canny</span><span class="hljs-params">(InputArray image, OutputArray edges, <span class="hljs-type">double</span> threshold1, <span class="hljs-type">double</span> threshold2, <span class="hljs-type">int</span> apertureSize = <span class="hljs-number">3</span>, <span class="hljs-type">bool</span> L2gradient = <span class="hljs-literal">false</span>)</span></span><br></code></pre></td></tr></table></figure><p>使用 Canny 算法在图像中查找边缘。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    Mat imgBlur,imgCanny;<br>    <span class="hljs-built_in">GaussianBlur</span>(img, imgBlur, <span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">3</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//高斯模糊</span><br>    <span class="hljs-built_in">Canny</span>(imgBlur, imgCanny, <span class="hljs-number">75</span>, <span class="hljs-number">125</span>); <span class="hljs-comment">//边缘检测</span><br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageCanny&quot;</span>, imgCanny);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E8%BE%B9%E7%BC%98/Canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第四课 高斯模糊</title>
    <link href="/2024/10/14/%E7%AC%AC4%E8%AF%BE%20%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/"/>
    <url>/2024/10/14/%E7%AC%AC4%E8%AF%BE%20%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::GaussianBlur</span><span class="hljs-params">(InputArray src, OutputArray dst, Size ksize, <span class="hljs-type">double</span> sigmaX, doube sigmaY = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> borderType = BORDER_DEFAULT)</span></span><br></code></pre></td></tr></table></figure><p>使用高斯滤波器模糊图像。该函数将源图像与指定的高斯核进行卷积。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    Mat imgBlur;<br>    <span class="hljs-built_in">GaussianBlur</span>(img, imgBlur, <span class="hljs-built_in">Size</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//高斯模糊</span><br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageBlur&quot;</span>, imgBlur);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第三课 颜色空间</title>
    <link href="/2024/10/14/%E7%AC%AC3%E8%AF%BE%20%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/"/>
    <url>/2024/10/14/%E7%AC%AC3%E8%AF%BE%20%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cv::cvtColor</span><span class="hljs-params">(InputArray src, OutputArray dst, <span class="hljs-type">int</span> code, <span class="hljs-type">int</span> dstCn = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><pre><code class="hljs">将图像从一种颜色空间转换为另一种颜色空间。该函数将输入图像从一种颜色空间转换为另一种颜色空间。在从 RGB 颜色空间转换的情况下，应明确指定通道的顺序（RGB 或 BGR）。man请注意，OpenCV 中的默认颜色格式通常称为 RGB，但实际上是 BGR（字节反转）。因此，标准（24 位）彩色图像中的第一个字节将是 8 位蓝色分量，第二个字节将是绿色，第三个字节将是红色。 然后第四、第五和第六个字节将是第二个像素（蓝色，然后是绿色，然后是红色），依此类推。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;../lesson1_pictureRead/img1.jpg&quot;</span>;<br>    Mat img = <span class="hljs-built_in">imread</span>(path);<br>    Mat imgGray;<br>    <span class="hljs-built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY); <span class="hljs-comment">//灰度化</span><br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;ImageGray&quot;</span>, imgGray);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/%E7%81%B0%E5%BA%A6%E5%8C%96.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第二课 读取视频</title>
    <link href="/2024/10/14/%E7%AC%AC2%E8%AF%BE%20%E8%AF%BB%E5%8F%96%E8%A7%86%E9%A2%91/"/>
    <url>/2024/10/14/%E7%AC%AC2%E8%AF%BE%20%E8%AF%BB%E5%8F%96%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>[[OpenCV C++ 基础#^029230|捕获视频]]需要创建一个VideoCapture对象。它的参数可以是视频文件的名称或设备索引。<br>VideoCapture类构造函数及成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">cv::VideoCapture::<span class="hljs-built_in">VideoCapture</span>()<br>cv::VideoCapture::<span class="hljs-built_in">VideoCapture</span>(<span class="hljs-type">const</span> String &amp;filename)<br>cv::VideoCapture::<span class="hljs-built_in">VideoCapture</span>(<span class="hljs-type">const</span> String &amp;filename, <span class="hljs-type">int</span> apiPreference)<br>cv::VideoCapture::<span class="hljs-built_in">VideoCapture</span>(<span class="hljs-type">int</span> index)<br>cv::VideoCapture::<span class="hljs-built_in">VideoCapture</span>(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> apiPreference)<br></code></pre></td></tr></table></figure><p>打开视频文件或捕获设备或 IP 视频流进行视频捕获。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> cv::VideoCapture::<span class="hljs-built_in">isOpened</span>() <span class="hljs-type">const</span><br></code></pre></td></tr></table></figure><p>如果视频捕获已经初始化，则返回true。如果先前对 VideoCapture 构造函数或VideoCapture::open()的调用成功，则该方法返回 true。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> cv::VideoCapture::<span class="hljs-built_in">read</span>(OutputArray image)<br></code></pre></td></tr></table></figure><p>抓取、解码并返回下一个视频帧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> cv::VideoCapture::<span class="hljs-built_in">get</span>(<span class="hljs-type">int</span> proId) <span class="hljs-type">const</span><br></code></pre></td></tr></table></figure><p>返回指定的VideoCapture属性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> cv::VideoCapture::<span class="hljs-built_in">set</span>(<span class="hljs-type">int</span> proId, <span class="hljs-type">double</span> value)<br></code></pre></td></tr></table></figure><p>在VideoCapture中设置一个属性。</p><p>[[1.Function]]代码展示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/imgcodecs.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/highgui.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/imgproc.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">VideoCapture <span class="hljs-title">VC</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    cv::Mat img;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        VC.<span class="hljs-built_in">read</span>(img);<br>        <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;img&quot;</span>,img);<br>        <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;opencv&gt;第一课 读取图片</title>
    <link href="/2024/10/14/%E7%AC%AC1%E8%AF%BE%20%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87/"/>
    <url>/2024/10/14/%E7%AC%AC1%E8%AF%BE%20%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>[[OpenCV C++ 基础#^2cd5e7|读取图片imread]]</p><p><strong>从文件加载图像</strong>。函数<code>imread</code>从指定文件加载图像并返回。 如果无法读取图像（由于缺少文件、权限不正确、格式不受支持或无效），该函数将返回一个空矩阵（ <code>Mat::data==NULL</code> ）。在<a href="https://so.csdn.net/so/search?q=%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F&spm=1001.2101.3001.7020">彩色图像</a>的情况下，解码图像的通道将以 B G R 顺序存储。</p><p>[[OpenCV C++ 基础#^89ea11|图片显示imshow]]</p><p>在指定窗口中显示图像。这个函数后面应该是 cv::waitKey 函数，它显示指定毫秒的图像。否则，它不会显示图像。例如，waitKey(0) 将无限显示窗口，直到有任何按键（适用于图像显示）。 waitKey(25) 将显示一帧 25 毫秒，之后显示将自动关闭。（如果你把它放在一个循环中读取视频，它会逐帧显示视频）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cv::waitKey</span><span class="hljs-params">(<span class="hljs-type">int</span> delay = <span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>等待按下的键。函数 waitKey 无限等待按键事件（当 delay≤0 时）或延迟毫秒，当它为正时。由于操作系统在切换线程之间有最短时间，因此该函数不会完全等待延迟毫秒，它会至少等待延迟毫秒，具体取决于当时您计算机上正在运行的其他内容。如果在指定的时间过去之前没有按下任何键，则返回被按下键的代码或 -1。</p><p>[[1.Function]]代码展示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgcodecs.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/imgproc.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string path = <span class="hljs-string">&quot;C:/Users/DELL/Desktop/20240920/C++opencv/img1.jpg&quot;</span>;<br>cv::Mat img = <span class="hljs-built_in">imread</span>(path);<br><span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;Image&quot;</span>, img);<br><span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//显示图片不会一闪而过</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="从文件读取图片"><a href="#从文件读取图片" class="headerlink" title="从文件读取图片"></a>从文件读取图片</h4><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>imgcodecs</td><td>Image file reading and writing</td></tr><tr><td>imgproc</td><td>Image Procssing</td></tr><tr><td>highgui</td><td>High-level GUI</td></tr></tbody></table><p>运行结果展示</p><p><img src="/%E7%AC%AC1%E8%AF%BE%20%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87/%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>song</title>
    <link href="/2024/10/12/%E6%B5%8B%E8%AF%95%E9%A1%B5/"/>
    <url>/2024/10/12/%E6%B5%8B%E8%AF%95%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1904965745&bvid=BV1aU411Z7sm&cid=1556521831&p=1" width="100%" height="500" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" allowfullscreen="allowfullscreen"sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Blog美化方案</title>
    <link href="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <url>/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="解密失败，try again？" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="235a41ee79c767dd629f4c0e4c98aa08d76a7ec4a9ab7ee883f791a7fd8fcdad"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VSCode配置Opencv环境</title>
    <link href="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[    <div id="aplayer-jourxKqx" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1985510682" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h3 id="1-安装VS-Code"><a href="#1-安装VS-Code" class="headerlink" title="1.安装VS Code"></a>1.安装VS Code</h3><h3 id="2-安装MinGW"><a href="#2-安装MinGW" class="headerlink" title="2.安装MinGW"></a>2.安装MinGW</h3><p>解压[[MinGW-w64]]压缩包，将该文件夹的bin路径添加到环境变量的系统变量中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/mingw64%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png"><br>Win+R，cmd调出控制台，检查MinGW-w64是否安装成功，若成功则如下图所示：</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/MinGW%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h3 id="3-安装CMake"><a href="#3-安装CMake" class="headerlink" title="3.安装CMake"></a>3.安装CMake</h3><p>将[[CMake]]安装包解压，文件夹如图所示：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%96%87%E4%BB%B6%E5%A4%B9.png"><br>将该文件夹下的bin文件路径添加到环境变量的系统变量中：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>Win+R，cmd调出控制台，检查CMake是否安装成功，若成功则如下图所示：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h3 id="4-OpenCV"><a href="#4-OpenCV" class="headerlink" title="4.OpenCV"></a>4.OpenCV</h3><p>安装完OpenCV后，在 build\x64 路径下新建一个文件夹（可自起，这里是 MinGW ）</p><h3 id="5-生成MakeFiles"><a href="#5-生成MakeFiles" class="headerlink" title="5.生成MakeFiles"></a>5.生成MakeFiles</h3><p>进入D:\cmake-3.29.4-windows-x86_64\bin :</p><p>打开cmake-gui，选择OpenCV的源文件路径和MakeFiles保存路径（即之前新建的MinGW）：</p><p>点击Configure，弹窗配置如下，点击Next：</p><p>选择前面安装的D:&#x2F;mingw64&#x2F;bin文件夹下的gcc.exe和g++.exe，点击Finsh:</p><p>–&gt;耐心等待中。。。<br>  执行过程中消息框会出现一堆红色信息，最后显示Configure done，是正常的。显示Configure done后，勾选BUILD_ opencv_world、WITH_ OPENGL和BUILD EXAMPLES，不勾选WITH_IPP、WITH_MSMF和ENABLE_PRECOMPILED_HEADERS (如果有的话)，CPU_ DISPATCH选空。再次点击Configure<br>  –&gt;耐心等待中。。。<br>  这次执行完后仍有错误如下：</p><p>由于网络问题（最好用梯子），仍然会有文件没有成功下载，这个时候需要手动下载它们。在自创建的MinGW下的CMakeDownloadLog.txt文件中列出了所有丢失文件的下载链接，比如：</p><p><a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll">https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll</a></p><p>一个个访问这些链接，下载后放到OpenCV源文件里.cache的相应子文件夹中替代原缓存文件（下载的文件重命名为相应地缓存文件名并删除原缓存文件）。</p><p>附一个找了很久的仓库链接：<a href="https://github.com/opencv/opencv_3rdparty/blob/ffmpeg/4.x_20240522_src/ffmpeg/ffmpeg_version.cmake">opencv_3rdparty&#x2F;ffmpeg&#x2F;ffmpeg_version.cmake at ffmpeg&#x2F;4.x_20240522_src · opencv&#x2F;opencv_3rdparty · GitHub</a><br>附一个经验贴：<br><a href="https://blog.csdn.net/qq_34801642/article/details/105577349">学习OpenCV3：Cmake编译OpenCV时无法下载ffmpeg、xfeatures2d等文件_ffmpeg: download failed: 6;”couldn’t resolve host -CSDN博客</a><br>或者按这个来：<br><a href="https://blog.csdn.net/martinkeith/article/details/108002333">cmake编译Opencv出现ffmpeg_cmake手动下载后也无法使用问题_opencv 编译 ffmpeg 无法打开-CSDN博客</a></p><p>这样从头到尾下载CMakeDownloadLog.txt中列出的所有丢失文件，之后，再次点击Configure，出现configure down之后查看CMakeDownloadLog.txt文件，成功了显示下图：</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%88%90%E5%8A%9F%E7%9A%84txt.png"><br>之后点击Generate，显示Generate Done。<br><img src="/CMakle%20Generate.png"></p><h3 id="6-编译OpenCV"><a href="#6-编译OpenCV" class="headerlink" title="6.编译OpenCV"></a>6.编译OpenCV</h3><p>使用 cmake 时要求安装 python3（版本没有限制，比2高就行），并且python 必须配好了环境变量。<br>cmd到MakeFiles所在文件夹（<a href="https://blog.csdn.net/weixin_42809924/article/details/104929103" title="如何cmd">如何cmd</a>），执行如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mingw32-make -j <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>如果遇到以下错误<br><a href="https://blog.csdn.net/cicy5219/article/details/131494138">mingw32-make: *** No targets specified and no makefile found. Stop. in VSCODE win10-CSDN博客</a>很可能只是你没有cmd到makefiles那里执行，就是自建的&#x2F;x64&#x2F;MinGW那里</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E4%B8%AD.png"><br>编译进行中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png"><br>编译完成<br>如果报错可查阅<a href="https://blog.huihut.com/2018/07/31/CompiledOpenCVWithMinGW64/" title="编译报错解答">编译报错解答</a>，如果编译成功则执行如下命令完成装载：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mingw32-<span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>装载完成后<br>将D:\opencv\build\x64\MinGW\bin加到环境变量的系统变量中：​​​​​​​<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/MinGW%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><h3 id="7-VS-Code配置"><a href="#7-VS-Code配置" class="headerlink" title="7.VS Code配置"></a>7.VS Code配置</h3><p>（1）launch.json配置</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/launch%E9%85%8D%E7%BD%AE.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/C++GDB.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/launchjson.png"></p><p>  在生成的launch.json文件中复制一下代码（需要配置miDebuggerPath项，注意修改name、preLaunchTask的 opencv版本号）：</p><p>{</p><pre><code class="hljs">&quot;version&quot;: &quot;0.2.0&quot;,&quot;configurations&quot;: [    &#123;        &quot;name&quot;: &quot;opencv4.5.5 debuge&quot;,        &quot;type&quot;: &quot;cppdbg&quot;,        &quot;request&quot;: &quot;launch&quot;,        &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,        &quot;args&quot;: [],        &quot;stopAtEntry&quot;: true,        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,        &quot;environment&quot;: [],        &quot;externalConsole&quot;: true,        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;D:/mingw64/bin/gdb.exe&quot;,        &quot;setupCommands&quot;: [            &#123;                &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                &quot;ignoreFailures&quot;: false            &#125;        ],        &quot;preLaunchTask&quot;: &quot;opencv4.5.5 compile task&quot;    &#125;]</code></pre><p>}<br>比如我更改为<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%9B%B4%E6%94%B9launchjson.png"></p><p>c_cpp_properties.json配置</p><p>  按快捷键crtl+shift+p，出现如下弹窗：（也可以自己手敲）<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AEccppproperties.png">  点击C&#x2F;C++:Edit Confighrations(UI)进行如下配置：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration2.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration3.png"><br>  配置完成会自动生成c_cpp_properties.json文件：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90cppp.png"></p><p>settings.json配置<br>  按ctrl+, 出现如下弹窗，输入code-runner:Executor Map，点击下方的 Edit in settings.json</p><p>点击 Edit in settings.json之后会生成settigs.json（该文件地址是：C:\Users\WCJ\AppData\Roaming\Code\User\settings.json），在生成的settings.json中复制如下代码（注意修改cpp项的地址和链接插件）：</p><p>{<br>    “workbench.colorTheme”: “Default Light+”,<br>    “editor.suggest.snippetsPreventQuickSuggestions”: false,<br>    “code-runner.runInTerminal”: true,<br>    “files.autoSave”: “afterDelay”,<br>    “code-runner.executorMap”: {</p><pre><code class="hljs">    &quot;javascript&quot;: &quot;node&quot;,    &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,    &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;cpp&quot;:&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt -I D:/opencv/build/include -L D:/opencv/build/x64/MinGW/bin  -l libopencv_world455 -l opencv_videoio_ffmpeg455_64 &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;php&quot;: &quot;php&quot;,    &quot;python&quot;: &quot;python -u&quot;,    &quot;perl&quot;: &quot;perl&quot;,    &quot;perl6&quot;: &quot;perl6&quot;,    &quot;ruby&quot;: &quot;ruby&quot;,    &quot;go&quot;: &quot;go run&quot;,    &quot;lua&quot;: &quot;lua&quot;,    &quot;groovy&quot;: &quot;groovy&quot;,    &quot;powershell&quot;: &quot;powershell -ExecutionPolicy ByPass -File&quot;,    &quot;bat&quot;: &quot;cmd /c&quot;,    &quot;shellscript&quot;: &quot;bash&quot;,    &quot;fsharp&quot;: &quot;fsi&quot;,    &quot;csharp&quot;: &quot;scriptcs&quot;,    &quot;vbscript&quot;: &quot;cscript //Nologo&quot;,    &quot;typescript&quot;: &quot;ts-node&quot;,    &quot;coffeescript&quot;: &quot;coffee&quot;,    &quot;scala&quot;: &quot;scala&quot;,    &quot;swift&quot;: &quot;swift&quot;,    &quot;julia&quot;: &quot;julia&quot;,    &quot;crystal&quot;: &quot;crystal&quot;,    &quot;ocaml&quot;: &quot;ocaml&quot;,    &quot;r&quot;: &quot;Rscript&quot;,    &quot;applescript&quot;: &quot;osascript&quot;,    &quot;clojure&quot;: &quot;lein exec&quot;,    &quot;haxe&quot;: &quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;,    &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;racket&quot;: &quot;racket&quot;,    &quot;scheme&quot;: &quot;csi -script&quot;,    &quot;ahk&quot;: &quot;autohotkey&quot;,    &quot;autoit&quot;: &quot;autoit3&quot;,    &quot;dart&quot;: &quot;dart&quot;,    &quot;pascal&quot;: &quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;d&quot;: &quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;haskell&quot;: &quot;runhaskell&quot;,    &quot;nim&quot;: &quot;nim compile --verbosity:0 --hints:off --run&quot;,    &quot;lisp&quot;: &quot;sbcl --script&quot;,    &quot;kit&quot;: &quot;kitc --run&quot;,    &quot;v&quot;: &quot;v run&quot;,    &quot;sass&quot;: &quot;sass --style expanded&quot;,    &quot;scss&quot;: &quot;scss --style expanded&quot;,    &quot;less&quot;: &quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;,    &quot;FortranFreeForm&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran-modern&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran_fixed-form&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;&#125;,&quot;window.zoomLevel&quot;: 1,&quot;files.associations&quot;: &#123;    &quot;iostream&quot;: &quot;cpp&quot;,    &quot;ostream&quot;: &quot;cpp&quot;&#125;</code></pre><p>}<br>主要修改cpp项<br>-I<br>-L<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A81.png"><br>-i<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A82.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A83.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E4%BF%AE%E6%94%B9settingjson.png"><br>最后完成修改。</p><p>上述过程配合一个新建的例程测试，这里提供如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2\opencv.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;C:/Users/DELL/Desktop/20240920/C++opencv/img1.jpg&quot;</span>;<br>    cv::Mat img = <span class="hljs-built_in">imread</span>(path);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;img&quot;</span>,img);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-运行测试"><a href="#8-运行测试" class="headerlink" title="8.运行测试"></a>8.运行测试</h3><p>运行结果如下，测试成功<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p><span id="busuanzi_container_page_pv">  ...已获取<span id="busuanzi_value_page_pv"></span>份浏览之力...</span>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>71SB</title>
    <link href="/2024/10/11/Hello%20World/"/>
    <url>/2024/10/11/Hello%20World/</url>
    
    <content type="html"><![CDATA[<h2 id="今晚三角洲"><a href="#今晚三角洲" class="headerlink" title="今晚三角洲"></a>今晚三角洲</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
