<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VSCode配置Opencv环境</title>
    <link href="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>1.安装VS Code<br>2.解压[[MinGW-w64]]压缩包，将该文件夹的bin路径添加到环境变量的系统变量中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/mingw64%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png"><br>Win+R，cmd调出控制台，检查MinGW-w64是否安装成功，若成功则如下图所示：</p><p><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/MinGW%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><p>将[[CMake]]安装包解压，文件夹如图所示：<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/CMake%E6%96%87%E4%BB%B6%E5%A4%B9.png"><br>将该文件夹下的bin文件路径添加到环境变量的系统变量中：<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/CMake%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>Win+R，cmd调出控制台，检查CMake是否安装成功，若成功则如下图所示：<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/CMake%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><p>4、OpenCV<br>安装完OpenCV后，在 build\x64 路径下新建一个文件夹（可自起，这里是 MinGW ）</p><p>5、生成MakeFiles<br>进入D:\cmake-3.29.4-windows-x86_64\bin :</p><p>打开cmake-gui，选择OpenCV的源文件路径和MakeFiles保存路径（即之前新建的MinGW）：</p><p>点击Configure，弹窗配置如下，点击Next：</p><p>选择前面安装的D:&#x2F;mingw64&#x2F;bin文件夹下的gcc.exe和g++.exe，点击Finsh:</p><p>–&gt;耐心等待中。。。<br>  执行过程中消息框会出现一堆红色信息，最后显示Configure done，是正常的。显示Configure done后，勾选BUILD_ opencv_world、WITH_ OPENGL和BUILD EXAMPLES，不勾选WITH_IPP、WITH_MSMF和ENABLE_PRECOMPILED_HEADERS (如果有的话)，CPU_ DISPATCH选空。再次点击Configure<br>  –&gt;耐心等待中。。。<br>  这次执行完后仍有错误如下：</p><p>由于网络问题（最好用梯子），仍然会有文件没有成功下载，这个时候需要手动下载它们。在自创建的MinGW下的CMakeDownloadLog.txt文件中列出了所有丢失文件的下载链接，比如：</p><p><a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll">https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll</a></p><p>一个个访问这些链接，下载后放到OpenCV源文件里.cache的相应子文件夹中替代原缓存文件（下载的文件重命名为相应地缓存文件名并删除原缓存文件）。</p><p>附一个找了很久的仓库链接：<a href="https://github.com/opencv/opencv_3rdparty/blob/ffmpeg/4.x_20240522_src/ffmpeg/ffmpeg_version.cmake">opencv_3rdparty&#x2F;ffmpeg&#x2F;ffmpeg_version.cmake at ffmpeg&#x2F;4.x_20240522_src · opencv&#x2F;opencv_3rdparty · GitHub</a><br>附一个经验贴：<br><a href="https://blog.csdn.net/qq_34801642/article/details/105577349">学习OpenCV3：Cmake编译OpenCV时无法下载ffmpeg、xfeatures2d等文件_ffmpeg: download failed: 6;”couldn’t resolve host -CSDN博客</a><br>或者按这个来：<br><a href="https://blog.csdn.net/martinkeith/article/details/108002333">cmake编译Opencv出现ffmpeg_cmake手动下载后也无法使用问题_opencv 编译 ffmpeg 无法打开-CSDN博客</a></p><p>这样从头到尾下载CMakeDownloadLog.txt中列出的所有丢失文件，之后，再次点击Configure，出现configure down之后查看CMakeDownloadLog.txt文件，成功了显示下图：</p><p><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E6%88%90%E5%8A%9F%E7%9A%84txt.png"><br>之后点击Generate，显示Generate Done。<br><img src="/CMakle%20Generate.png"></p><h3 id="编译OpenCV"><a href="#编译OpenCV" class="headerlink" title="编译OpenCV"></a>编译OpenCV</h3><p>使用 cmake 时要求安装 python3（版本没有限制，比2高就行），并且python 必须配好了环境变量。<br>cmd到MakeFiles所在文件夹（<a href="https://blog.csdn.net/weixin_42809924/article/details/104929103" title="如何cmd">如何cmd</a>），执行如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mingw32-make -j <span class="number">8</span></span><br></pre></td></tr></table></figure><p>如果遇到以下错误<br><a href="https://blog.csdn.net/cicy5219/article/details/131494138">mingw32-make: *** No targets specified and no makefile found. Stop. in VSCODE win10-CSDN博客</a>很可能只是你没有cmd到makefiles那里执行，就是自建的&#x2F;x64&#x2F;MinGW那里</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E4%B8%AD.png"><br>编译进行中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png"><br>编译完成<br>如果报错可查阅<a href="https://blog.huihut.com/2018/07/31/CompiledOpenCVWithMinGW64/" title="编译报错解答">编译报错解答</a>，如果编译成功则执行如下命令完成装载：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mingw32-<span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>装载完成后<br>将D:\opencv\build\x64\MinGW\bin加到环境变量的系统变量中：​​​​​​​<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/MinGW%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>VS Code配置<br>（1）launch.json配置</p><p><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/launch%E9%85%8D%E7%BD%AE.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/C++GDB.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/launchjson.png"></p><p>  在生成的launch.json文件中复制一下代码（需要配置miDebuggerPath项，注意修改name、preLaunchTask的 opencv版本号）：</p><p>{</p><pre><code>&quot;version&quot;: &quot;0.2.0&quot;,&quot;configurations&quot;: [    &#123;        &quot;name&quot;: &quot;opencv4.5.5 debuge&quot;,        &quot;type&quot;: &quot;cppdbg&quot;,        &quot;request&quot;: &quot;launch&quot;,        &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,        &quot;args&quot;: [],        &quot;stopAtEntry&quot;: true,        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,        &quot;environment&quot;: [],        &quot;externalConsole&quot;: true,        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;D:/mingw64/bin/gdb.exe&quot;,        &quot;setupCommands&quot;: [            &#123;                &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                &quot;ignoreFailures&quot;: false            &#125;        ],        &quot;preLaunchTask&quot;: &quot;opencv4.5.5 compile task&quot;    &#125;]</code></pre><p>}<br>比如我更改为<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E6%9B%B4%E6%94%B9launchjson.png"></p><h4 id="（2）c-cpp-properties-json配置"><a href="#（2）c-cpp-properties-json配置" class="headerlink" title="（2）c_cpp_properties.json配置"></a>（2）c_cpp_properties.json配置</h4><p>  按快捷键crtl+shift+p，出现如下弹窗：（也可以自己手敲）<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AEccppproperties.png">  点击C&#x2F;C++:Edit Confighrations(UI)进行如下配置：<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/Configuration.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/Configuration2.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/Configuration3.png"><br>  配置完成会自动生成c_cpp_properties.json文件：<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90cppp.png"></p><p>settings.json配置<br>  按ctrl+, 出现如下弹窗，输入code-runner:Executor Map，点击下方的 Edit in settings.json</p><p>点击 Edit in settings.json之后会生成settigs.json（该文件地址是：C:\Users\WCJ\AppData\Roaming\Code\User\settings.json），在生成的settings.json中复制如下代码（注意修改cpp项的地址和链接插件）：</p><p>{<br>    “workbench.colorTheme”: “Default Light+”,<br>    “editor.suggest.snippetsPreventQuickSuggestions”: false,<br>    “code-runner.runInTerminal”: true,<br>    “files.autoSave”: “afterDelay”,<br>    “code-runner.executorMap”: {</p><pre><code>    &quot;javascript&quot;: &quot;node&quot;,    &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,    &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;cpp&quot;:&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt -I D:/opencv/build/include -L D:/opencv/build/x64/MinGW/bin  -l libopencv_world455 -l opencv_videoio_ffmpeg455_64 &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;php&quot;: &quot;php&quot;,    &quot;python&quot;: &quot;python -u&quot;,    &quot;perl&quot;: &quot;perl&quot;,    &quot;perl6&quot;: &quot;perl6&quot;,    &quot;ruby&quot;: &quot;ruby&quot;,    &quot;go&quot;: &quot;go run&quot;,    &quot;lua&quot;: &quot;lua&quot;,    &quot;groovy&quot;: &quot;groovy&quot;,    &quot;powershell&quot;: &quot;powershell -ExecutionPolicy ByPass -File&quot;,    &quot;bat&quot;: &quot;cmd /c&quot;,    &quot;shellscript&quot;: &quot;bash&quot;,    &quot;fsharp&quot;: &quot;fsi&quot;,    &quot;csharp&quot;: &quot;scriptcs&quot;,    &quot;vbscript&quot;: &quot;cscript //Nologo&quot;,    &quot;typescript&quot;: &quot;ts-node&quot;,    &quot;coffeescript&quot;: &quot;coffee&quot;,    &quot;scala&quot;: &quot;scala&quot;,    &quot;swift&quot;: &quot;swift&quot;,    &quot;julia&quot;: &quot;julia&quot;,    &quot;crystal&quot;: &quot;crystal&quot;,    &quot;ocaml&quot;: &quot;ocaml&quot;,    &quot;r&quot;: &quot;Rscript&quot;,    &quot;applescript&quot;: &quot;osascript&quot;,    &quot;clojure&quot;: &quot;lein exec&quot;,    &quot;haxe&quot;: &quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;,    &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;racket&quot;: &quot;racket&quot;,    &quot;scheme&quot;: &quot;csi -script&quot;,    &quot;ahk&quot;: &quot;autohotkey&quot;,    &quot;autoit&quot;: &quot;autoit3&quot;,    &quot;dart&quot;: &quot;dart&quot;,    &quot;pascal&quot;: &quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;d&quot;: &quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;haskell&quot;: &quot;runhaskell&quot;,    &quot;nim&quot;: &quot;nim compile --verbosity:0 --hints:off --run&quot;,    &quot;lisp&quot;: &quot;sbcl --script&quot;,    &quot;kit&quot;: &quot;kitc --run&quot;,    &quot;v&quot;: &quot;v run&quot;,    &quot;sass&quot;: &quot;sass --style expanded&quot;,    &quot;scss&quot;: &quot;scss --style expanded&quot;,    &quot;less&quot;: &quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;,    &quot;FortranFreeForm&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran-modern&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran_fixed-form&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;&#125;,&quot;window.zoomLevel&quot;: 1,&quot;files.associations&quot;: &#123;    &quot;iostream&quot;: &quot;cpp&quot;,    &quot;ostream&quot;: &quot;cpp&quot;&#125;</code></pre><p>}<br>主要修改cpp项<br>-I<br>-L<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A81.png"><br>-i<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A82.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A83.png"><br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E4%BF%AE%E6%94%B9settingjson.png"><br>最后完成修改。</p><p>上述过程配合一个新建的例程测试，这里提供如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string path = <span class="string">&quot;C:/Users/DELL/Desktop/20240920/C++opencv/img1.jpg&quot;</span>;</span><br><span class="line">    cv::Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;img&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，测试成功<br><img src="/2024/10/11/Hello%20World/cv%E7%8E%AF%E5%A2%83/%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>71SB</title>
    <link href="/2024/10/11/Hello%20World/"/>
    <url>/2024/10/11/Hello%20World/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="今晚三角洲"><a href="#今晚三角洲" class="headerlink" title="今晚三角洲"></a>今晚三角洲</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
