<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Blog美化方案</title>
    <link href="/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <url>/2024/10/12/Blog%E7%BE%8E%E5%8C%96%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="解密失败，try again？" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="d2f53987516a8fabccf36c159a477665b66e4bbfa1876becc5a0d8ec6ae8c565">a0235b8f304e9f615d8601cf846ed1ae1cc8b0f58be18a0b50dd08618fe71042bcdfbd2d3f8e3c1f5544b9a4684ba352e11f40e0de4febdfe867fa13a3a832d10fbec3a11ae3846305fc91bf65924dfe190fb7536efd1af12cf715b34ff39f3a6ef005eb67b504476dc0ba12435393b66c8190efd187f59dc75a78123dab2e889843db8710e3e21f73a7dfbfea5270ea2f2c0df8a68fe47230d0d6a202342a91cbff3943042d322aecf30905225376f179c0633d86fbed513f01fa1f41143805418ddb79a04624048d4946507be1def10222bc1c96eddd6e1f8e396c47e551aaa200ee8a9d337042f9f389bbbcd4c9cc58f7201bff842db9b4c0346aa56b03b87f20259e2ad005a6b1091c707d8354c6e459b31d5f293e2bbbeaa0062d45d0e60d64606f3526da8484bd5c3520fbe365d3fb23f6cbbb596c27675602708d1cb5143db61624f83e0f89862a68c9de9a3a81093bdec0112bb48c7951d953b7ee1e4b4b8c7fd7e38d41413da10ebe971ab20d094a4741991c165b1a407ad8341b12ac8ff0b1de39a180af50cc4cb8a015a4337947f17acf493000e4f81a25f0268f1fa621ff0fba16e2bcaf72cb79e573346029fdcd7db35debd2685b5c7058e4385f80eb8a0e9eb9b3da44cf3d2d6187532df1c594f1e3a9818a3344bdb87f300e0bd450b21c418c05d59c54f7d5a17a44cf2b5edc1775a8c663b79753534972387716d2375e6e3efd27f334cd9a38dc49038fce9339a71f34cc3d57cf9779f72e36d89549ff2fbc73fab000df686c255a71101a42ca63691732ae0214873610452b6f046f1e5b32da66d3b9612f240463af65571e7c8c7ec5282fd29becc8d03e77208f508fe19b2b6644ea9ca67ade8638f5a2c8ef98c32e95f73403b21560e15d16dc12d6be370207445d1b17f8a3df3c682c27cfda90ddff5a8cb7559423bd5b477d04421622744c2d949f6d420e2ff944ca43527ffb1541a5c10203436e8732561b2c783fad7e65a7b4b0a11c3007c3db847b27a23c678cfd1c76823a832620db1beb2589426aaa2d162c3297867da3b75d31096b6b182063d09527f8f86ac16cfd9403358a4d689367e4c06d598a4fc87a529d377d7c5f3a463f0ad73385cab37dd563de23d6963210a01968caab7f766ec1e6404c18ed5a49922e060e9522340027ce8eaeda355bb5b23a8cc085c7bc7ec24f9b469c96021934cccef3bdb11487f1914be475de1723642950ca57e21207081872543135e73f89129dd1dbd75667d860a3fb9abb8e9a8a022a9fd28e2661bf82437f63e2596335e5a508e05fa376a2e598502d2fb7c0ae7b428c45a82356d4eb9ae106111a32173f863beede248cfa7faa567e24c2d0a39cbba83c7f014a3c70dc2f12bc682dc13eb1d9dead1b8f8385226778bc06639701068230e589599b3104b1b6f0aaf9385eaba20764a1b5c1731c084d665a4ffe5bcb947d1a07b0ebbfcf8831e5ac5505e4b9d0efede310764ceab130e3519ca2ce2eef597cf270c15995dff34445d635738560829182968e6c6a8800b3b3fe0bac2417fcb50401c3f41f724f3580472b78636fcbd53a93b6d6309e68bcd03e12d059b75012f3c0ee724852dee02baf6da6ad69e2bc249b32ba80d0ad9f323ee4a98ebda3917069c0aaffd287cdea7b3a52b6a88aaa7d2dda201a17ea235a0239129653adf97dc4110acaf6c18215e02f797e2c8698411f74326a78fa577e130b2acbe9bb5b4f86cc9a1015b0255c91157b0e3fe3ab6c2cc63099ef5ae171820d77f10d0a3dc6bb0b8b85a7e150bda63a17182fba0f4614f1ff547d18d1fb1fdb270cca808f140d520c65b0fea44320f717f34a305d861e1d176aa20f613938ff9b1001194433b0aaa177309032fc02996e895bad2118689fe4f87e5079333b31455a99ff269f8048f8a1783376dd1f0a23956c2737e94e8effc42d46dbb88319433b5a6d3317aa739332f81f4fb14a7c3e61271d797d9e9122a37d902cd9052943c924571c2c0ddf91b4322e18f9024c4d7809887738d72336bd711f313698c2cb8729f01cda7d7e0f551f35c45c9509f5727682a184bd9937ba41ecad308ce389209c690bf60ab9ab231bc4825c151e467ee36f867b912be4a0fb1dbaecd897d80f5e2dfad078997fa96044d4f2d93d37e90d3aa5f6fdaf8e4723237e640736d1ffb38d57d530d1f8d05e10278dd9716ee3a83781c187c0c2cd92be78d03bfa95ddfee5d49a13b8934510c5a3f11fb61383d2c7177c204d67b70fb2e70ae89eabad51dc42aaa2fc380f70205d78e83e6ffe81bf0804403ab836655d589b10d2cab72a68f6a87961990fd61ee5a7f6ad54d99fc1fbabd59f3adb753d16651b53a75590d42d63325c93d53213a82b68168b1ef674d80fb3ac0198ab4f7212055f9e62e8dd5fc5be71118fc6cb5d176e3f92b4e14e849aac5d70b900c6d913d5b278e4a787d835460b041667774e73afc0693765792c48ebbc13e7ad354a5b56ecf4bed2557e5a0f6928516a6135c5475977d8f7d5e3fb9f410268eec6bc53b58ac86b264b6ad1a375c9a619d705b82e21bd90f1b21d9f024f9f2bad02c93a3d0652baf1bb226d65d344bfa7b8f401998db00e6195ae00cc71d6af06b3fa35429a3c89ecc68a717589062b386adc5efc0523aa6e87b42b4bdfa9e73f10da55a81f6fe9f0cfedb5151d91104b8cbf67c8888f5111dc861d843b6062b46897da5de28fec08e559dca1ed0101e8fcbe9424669ba497e0465e6f212d17a6a94c8d59733645e37d5905113f22423b1fa83abf466f59f62c0cf48d008e8b726bbeb5b22c454121a549a41447267ec529d87e73da0a1d90e621c487657ff0d76ca3a13cda551379763bed59b09679e03251e5aa12d3fd95b92dfb20e8080c74ea75d9e3f5c2ac204e3711b62a7b30040bcbbbfb36c169bc53333f20feb05b4bf427f0b30da919e20aaa6e173da69eefbec6aef771f19620bf2bad4a21f0baf7d193f6564122901d71d313e26fbde04d85f3b2ec2855da0cca0a4e8f6b2626ca99ff018a438451bb5a28f28cbef4282f29410001ec69c882ca7a849d55acedc022cc2c49f2410afa9d6024a5b1651e488bf988c49decf74896cb63a67cdcb692fca8a43c3b71259530ef2a8225f878cfb7e398185d776b722df09f4796399128a43d113df79415f844d3ef067a7081c3d89d1ffc8fa1430aceeceb1f7a714bb65d606503a75f5749eb52809da29ff241b773f231fcf497caefc80a64ecd41bebf0d7cdca5c32d4f8af9a6307bc4376aa4dbd589eaa7a56deb0a5207cd66769f2cc5f72a75e79a1ce256dca8fae84bfe95ad176dc17bed38c2f044f45b958432ae98e59c9c01275f6c5aff58d0243721190c2fa2a6df4fffeed86b4ac6e476ee5db70ec782a2b0a386748eefb7b9ca024c6b2af257ca264cadd546f2a941030ed401c9c4a432582a4db75363c27aacf83ec55a84b7ee68d7c9ae60987c69ba129dd811b3de0a297188bf914e3e22f03ad37b7785623015e530b16265411518bb3a2a4573f108eb9f2674a7ec398d8da33d6e7b990e886ae1b2352e95ecfcb2ac0095872b156c8565996f481b6d99fbd6b0e5f3d5931b5ad5021599936ab637518f50441ffacda9a3f97e6cc19df156599d969ef4b4905a649b4567d18a32fc42d93821123911623b7eac81277dbd3fae6cfcad6f4af7cda6f570e6e66ea46264ab53148c6c9d8fe172e344debf1b517843ab91e6f9e84ac035b16b296cc8f138d71a37d797ba819c8e8bc21a093428db4be660ae4f042b9722756e455449c25e1da747217a2bd2725076c64ab731040aa95adc2602ae054e0454785fe03476fc1e8ace6ac1c004344fad94737873b760ee19d274f0ffb62dfaa7e84a1efdf8d77c25c80988da0613f214fda0c8b4d33795bfab77c8643b7db174eecd22043fa3f95a2d56121c198e04789f974822613ac3843a962880e8755cc3202a4db79695f822b49d76caee1b7c39d6d0c299b6750b443a3ed08058896a30d09610ba0fec75e507225dd92a80d83edafb4f91008ae50a71f37472f646465f9c472053c5988efc9faa09e313082f9c64bca25b1cdb5cb7b3857b9b981d743bf410c42c05b89a575e97bc4f13dc21d803a2a142348ab9d518cbbabbc0d5629381481dcf5869f219abbd690062dfd2ca6203ffd4ea280bd112f40e0a8c7e79f03670b0dfe061b249543a4ccdbd8dad6b89c1cc8c12202870877d72014774f49737c621ba289f70d9032e9ea40889d00ad96c47c9bf35d8062de66e3f236dfef4c9035b420c1abe680bf146dd2104db8f74be5b1a61d7d4e658491d3778867dbb2e4d956ba684337f1b37c1f2cb2f56092284faeac7d84a0944157d906dd3325f272c9d8f6cac56c5149c6453bdfb2682e73643b690cb8345af0f196993363d69f9adb40013f04c2b603c297ae1a8d9bb45ee335ae12b50d020a3284cf81155c3633c2f1c6e716d54b46abc4e5b4d97f5db2f84f09958c973a17007af195bf0529c8eee84aa3541d0341c9f71c6f69cbb0f6203a2d661b0994e9fac919e431d1c555523c1b2a7ad92603cbf5dfe1a8a5ad172b4eb79da553069679f1174fe9024a5423391a6b2912202a31fc7ae7fb358cac98501064726805192529b632b78f00629d3ebc2bc41a5a8654ea356d1f9b61c9aa415833463bea79ba26a5965dd1b376acbf2193189169d02f224303d4fa4307fb2c986bb0a53ae71c8648936bf6c7ff95b9944d9302e9b5b7246469479840e230d045969845f7ae6564626a788f6a63e915e7407189c600ce9d1c2ab0fb2484319bc2a7fca68051a03d0f385a7a91f8409401be52e55e193639dd2a08575ae9d0f2131c20e3cb5a63c4f788a7d9120806006eb55d72e2b1a67752de23df0b619fd46231caecf5ef8ad59aa0ecd8d10dc66924fb000e37a5e859eb257cabd2c9a379a7a27fc540c04ec1f84e7fa5022c1d5b5fd014a8ff84a929faa03d44e74c40b607dda8eaa78fa2378d127758ef1b9462244f7b6eeee57b0db991c9c709099ef44304d989ef2df3f4dd48ab21c87b722128f62237d1e87993c84970c0a4005e5b5681dde5b785eab33dceb16e997d59ebd5d09149e41ee735c922c05038466fcf84da32a6db93d82226ca0477e68453d8e6757f4d54832ba2f2285bf5b5a94216e1a9f681d506feaa00faad8bf4d3a1975f882709733786437aa6bae1f5c9008f9ef689f9220b569a91656a41c72be09dabb220689af9ea79fdc5f2c945cdaef764274fc6650d238b2568e1ef289232bba71f65960a65e33d632fc7434a4aaea7cba8c2d75b6c579e010e5a41027398506e0cb6e4deeeec1ca9215e51830a9c3e061bf3fe6c6d4ba2045143f794b1aedbd3f31f1f707cbb3ea2834b52165bc24f5fa6dd9bfdbecc8d9f5fdc9a2edef13d38d5ef37f159106ce38f1a4adaffdc341f11ac1f64c578b6a4e45eb1c4c6af93b7cc983050d3440ddf970e1aa67327af80f74f241f971344b305aa5f4225fb0fca4f7da24b0ed8e48c2087e4662b142cfd3078d8aa9946cd0dc56054ac2a3a0d39c0bac2d84e049feebee6b3c77caeecb4e201e9c6c123a07ed87cc8bb6dbafa1b116070d118454f78ea62d02aee64d6fc6d68df97cdd94ed32bfb76</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VSCode配置Opencv环境</title>
    <link href="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[    <div id="aplayer-pwbJuELG" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1985510682" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h3 id="1-安装VS-Code"><a href="#1-安装VS-Code" class="headerlink" title="1.安装VS Code"></a>1.安装VS Code</h3><h3 id="2-安装MinGW"><a href="#2-安装MinGW" class="headerlink" title="2.安装MinGW"></a>2.安装MinGW</h3><p>解压[[MinGW-w64]]压缩包，将该文件夹的bin路径添加到环境变量的系统变量中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/mingw64%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png"><br>Win+R，cmd调出控制台，检查MinGW-w64是否安装成功，若成功则如下图所示：</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/MinGW%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h3 id="3-安装CMake"><a href="#3-安装CMake" class="headerlink" title="3.安装CMake"></a>3.安装CMake</h3><p>将[[CMake]]安装包解压，文件夹如图所示：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%96%87%E4%BB%B6%E5%A4%B9.png"><br>将该文件夹下的bin文件路径添加到环境变量的系统变量中：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>Win+R，cmd调出控制台，检查CMake是否安装成功，若成功则如下图所示：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/CMake%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h3 id="4-OpenCV"><a href="#4-OpenCV" class="headerlink" title="4.OpenCV"></a>4.OpenCV</h3><p>安装完OpenCV后，在 build\x64 路径下新建一个文件夹（可自起，这里是 MinGW ）</p><h3 id="5-生成MakeFiles"><a href="#5-生成MakeFiles" class="headerlink" title="5.生成MakeFiles"></a>5.生成MakeFiles</h3><p>进入D:\cmake-3.29.4-windows-x86_64\bin :</p><p>打开cmake-gui，选择OpenCV的源文件路径和MakeFiles保存路径（即之前新建的MinGW）：</p><p>点击Configure，弹窗配置如下，点击Next：</p><p>选择前面安装的D:&#x2F;mingw64&#x2F;bin文件夹下的gcc.exe和g++.exe，点击Finsh:</p><p>–&gt;耐心等待中。。。<br>  执行过程中消息框会出现一堆红色信息，最后显示Configure done，是正常的。显示Configure done后，勾选BUILD_ opencv_world、WITH_ OPENGL和BUILD EXAMPLES，不勾选WITH_IPP、WITH_MSMF和ENABLE_PRECOMPILED_HEADERS (如果有的话)，CPU_ DISPATCH选空。再次点击Configure<br>  –&gt;耐心等待中。。。<br>  这次执行完后仍有错误如下：</p><p>由于网络问题（最好用梯子），仍然会有文件没有成功下载，这个时候需要手动下载它们。在自创建的MinGW下的CMakeDownloadLog.txt文件中列出了所有丢失文件的下载链接，比如：</p><p><a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll">https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg.dll</a></p><p>一个个访问这些链接，下载后放到OpenCV源文件里.cache的相应子文件夹中替代原缓存文件（下载的文件重命名为相应地缓存文件名并删除原缓存文件）。</p><p>附一个找了很久的仓库链接：<a href="https://github.com/opencv/opencv_3rdparty/blob/ffmpeg/4.x_20240522_src/ffmpeg/ffmpeg_version.cmake">opencv_3rdparty&#x2F;ffmpeg&#x2F;ffmpeg_version.cmake at ffmpeg&#x2F;4.x_20240522_src · opencv&#x2F;opencv_3rdparty · GitHub</a><br>附一个经验贴：<br><a href="https://blog.csdn.net/qq_34801642/article/details/105577349">学习OpenCV3：Cmake编译OpenCV时无法下载ffmpeg、xfeatures2d等文件_ffmpeg: download failed: 6;”couldn’t resolve host -CSDN博客</a><br>或者按这个来：<br><a href="https://blog.csdn.net/martinkeith/article/details/108002333">cmake编译Opencv出现ffmpeg_cmake手动下载后也无法使用问题_opencv 编译 ffmpeg 无法打开-CSDN博客</a></p><p>这样从头到尾下载CMakeDownloadLog.txt中列出的所有丢失文件，之后，再次点击Configure，出现configure down之后查看CMakeDownloadLog.txt文件，成功了显示下图：</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%88%90%E5%8A%9F%E7%9A%84txt.png"><br>之后点击Generate，显示Generate Done。<br><img src="/CMakle%20Generate.png"></p><h3 id="6-编译OpenCV"><a href="#6-编译OpenCV" class="headerlink" title="6.编译OpenCV"></a>6.编译OpenCV</h3><p>使用 cmake 时要求安装 python3（版本没有限制，比2高就行），并且python 必须配好了环境变量。<br>cmd到MakeFiles所在文件夹（<a href="https://blog.csdn.net/weixin_42809924/article/details/104929103" title="如何cmd">如何cmd</a>），执行如下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mingw32-make -j <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>如果遇到以下错误<br><a href="https://blog.csdn.net/cicy5219/article/details/131494138">mingw32-make: *** No targets specified and no makefile found. Stop. in VSCODE win10-CSDN博客</a>很可能只是你没有cmd到makefiles那里执行，就是自建的&#x2F;x64&#x2F;MinGW那里</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E4%B8%AD.png"><br>编译进行中<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/opencv%E6%BA%90%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png"><br>编译完成<br>如果报错可查阅<a href="https://blog.huihut.com/2018/07/31/CompiledOpenCVWithMinGW64/" title="编译报错解答">编译报错解答</a>，如果编译成功则执行如下命令完成装载：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mingw32-<span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>装载完成后<br>将D:\opencv\build\x64\MinGW\bin加到环境变量的系统变量中：​​​​​​​<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/MinGW%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><h3 id="7-VS-Code配置"><a href="#7-VS-Code配置" class="headerlink" title="7.VS Code配置"></a>7.VS Code配置</h3><p>（1）launch.json配置</p><p><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/launch%E9%85%8D%E7%BD%AE.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/C++GDB.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/launchjson.png"></p><p>  在生成的launch.json文件中复制一下代码（需要配置miDebuggerPath项，注意修改name、preLaunchTask的 opencv版本号）：</p><p>{</p><pre><code class="hljs">&quot;version&quot;: &quot;0.2.0&quot;,&quot;configurations&quot;: [    &#123;        &quot;name&quot;: &quot;opencv4.5.5 debuge&quot;,        &quot;type&quot;: &quot;cppdbg&quot;,        &quot;request&quot;: &quot;launch&quot;,        &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,        &quot;args&quot;: [],        &quot;stopAtEntry&quot;: true,        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,        &quot;environment&quot;: [],        &quot;externalConsole&quot;: true,        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;D:/mingw64/bin/gdb.exe&quot;,        &quot;setupCommands&quot;: [            &#123;                &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                &quot;ignoreFailures&quot;: false            &#125;        ],        &quot;preLaunchTask&quot;: &quot;opencv4.5.5 compile task&quot;    &#125;]</code></pre><p>}<br>比如我更改为<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%9B%B4%E6%94%B9launchjson.png"></p><p>c_cpp_properties.json配置</p><p>  按快捷键crtl+shift+p，出现如下弹窗：（也可以自己手敲）<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AEccppproperties.png">  点击C&#x2F;C++:Edit Confighrations(UI)进行如下配置：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration2.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/Configuration3.png"><br>  配置完成会自动生成c_cpp_properties.json文件：<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90cppp.png"></p><p>settings.json配置<br>  按ctrl+, 出现如下弹窗，输入code-runner:Executor Map，点击下方的 Edit in settings.json</p><p>点击 Edit in settings.json之后会生成settigs.json（该文件地址是：C:\Users\WCJ\AppData\Roaming\Code\User\settings.json），在生成的settings.json中复制如下代码（注意修改cpp项的地址和链接插件）：</p><p>{<br>    “workbench.colorTheme”: “Default Light+”,<br>    “editor.suggest.snippetsPreventQuickSuggestions”: false,<br>    “code-runner.runInTerminal”: true,<br>    “files.autoSave”: “afterDelay”,<br>    “code-runner.executorMap”: {</p><pre><code class="hljs">    &quot;javascript&quot;: &quot;node&quot;,    &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,    &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;cpp&quot;:&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt -I D:/opencv/build/include -L D:/opencv/build/x64/MinGW/bin  -l libopencv_world455 -l opencv_videoio_ffmpeg455_64 &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;objective-c&quot;: &quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;php&quot;: &quot;php&quot;,    &quot;python&quot;: &quot;python -u&quot;,    &quot;perl&quot;: &quot;perl&quot;,    &quot;perl6&quot;: &quot;perl6&quot;,    &quot;ruby&quot;: &quot;ruby&quot;,    &quot;go&quot;: &quot;go run&quot;,    &quot;lua&quot;: &quot;lua&quot;,    &quot;groovy&quot;: &quot;groovy&quot;,    &quot;powershell&quot;: &quot;powershell -ExecutionPolicy ByPass -File&quot;,    &quot;bat&quot;: &quot;cmd /c&quot;,    &quot;shellscript&quot;: &quot;bash&quot;,    &quot;fsharp&quot;: &quot;fsi&quot;,    &quot;csharp&quot;: &quot;scriptcs&quot;,    &quot;vbscript&quot;: &quot;cscript //Nologo&quot;,    &quot;typescript&quot;: &quot;ts-node&quot;,    &quot;coffeescript&quot;: &quot;coffee&quot;,    &quot;scala&quot;: &quot;scala&quot;,    &quot;swift&quot;: &quot;swift&quot;,    &quot;julia&quot;: &quot;julia&quot;,    &quot;crystal&quot;: &quot;crystal&quot;,    &quot;ocaml&quot;: &quot;ocaml&quot;,    &quot;r&quot;: &quot;Rscript&quot;,    &quot;applescript&quot;: &quot;osascript&quot;,    &quot;clojure&quot;: &quot;lein exec&quot;,    &quot;haxe&quot;: &quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;,    &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;racket&quot;: &quot;racket&quot;,    &quot;scheme&quot;: &quot;csi -script&quot;,    &quot;ahk&quot;: &quot;autohotkey&quot;,    &quot;autoit&quot;: &quot;autoit3&quot;,    &quot;dart&quot;: &quot;dart&quot;,    &quot;pascal&quot;: &quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;d&quot;: &quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;haskell&quot;: &quot;runhaskell&quot;,    &quot;nim&quot;: &quot;nim compile --verbosity:0 --hints:off --run&quot;,    &quot;lisp&quot;: &quot;sbcl --script&quot;,    &quot;kit&quot;: &quot;kitc --run&quot;,    &quot;v&quot;: &quot;v run&quot;,    &quot;sass&quot;: &quot;sass --style expanded&quot;,    &quot;scss&quot;: &quot;scss --style expanded&quot;,    &quot;less&quot;: &quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;,    &quot;FortranFreeForm&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran-modern&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran_fixed-form&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,    &quot;fortran&quot;: &quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;&#125;,&quot;window.zoomLevel&quot;: 1,&quot;files.associations&quot;: &#123;    &quot;iostream&quot;: &quot;cpp&quot;,    &quot;ostream&quot;: &quot;cpp&quot;&#125;</code></pre><p>}<br>主要修改cpp项<br>-I<br>-L<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A81.png"><br>-i<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A82.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E9%93%BE%E6%8E%A5%E5%99%A83.png"><br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E4%BF%AE%E6%94%B9settingjson.png"><br>最后完成修改。</p><p>上述过程配合一个新建的例程测试，这里提供如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2\opencv.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;C:/Users/DELL/Desktop/20240920/C++opencv/img1.jpg&quot;</span>;<br>    cv::Mat img = <span class="hljs-built_in">imread</span>(path);<br>    <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;img&quot;</span>,img);<br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-运行测试"><a href="#8-运行测试" class="headerlink" title="8.运行测试"></a>8.运行测试</h3><p>运行结果如下，测试成功<br><img src="/2024/10/11/VSCode%E9%85%8D%E7%BD%AEOpencv%E7%8E%AF%E5%A2%83/%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87.png"></p><span id="busuanzi_container_page_pv">  ...已获取<span id="busuanzi_value_page_pv"></span>份浏览之力...</span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>71SB</title>
    <link href="/2024/10/11/Hello%20World/"/>
    <url>/2024/10/11/Hello%20World/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="今晚三角洲"><a href="#今晚三角洲" class="headerlink" title="今晚三角洲"></a>今晚三角洲</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
